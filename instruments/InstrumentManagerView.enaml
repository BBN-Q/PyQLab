from enaml.widgets.api import Window, Container, Notebook, Page, PushButton, GroupBox, Form, Label, Field
from enaml.layout.api import hbox, vbox, spacer
from enaml.core.api import Looper, Include

import MicrowaveSources, AWGs

from AWGsViews import AWGViewMap
from MicrowaveSourcesViews import MicrowaveSourceViewMap

from DigitizersViews import DigitizerViewMap
import Digitizers

from DCSourcesViews import DCSourcesViewMap
import DCSources

from AttenuatorsViews import AttenuatorsViewMap
import Attenuators

import Analysers

from DictManagerView import DictManagerView

enamldef EmptyInstrView(Container):
	attr instr

#For standard instruments just display the name and address field
enamldef DefaultInstrView(GroupBox):
	hug_width = 'medium'
	attr instr
	title := '{} ({})'.format(instr.name, instr.__class__.__name__)
	Form:
		Label:
			text = 'Address'
		Field:
			text := instr.address

otherViewMap = {type(None):EmptyInstrView, Analysers.HP71000:DefaultInstrView, Analysers.SpectrumAnalyzer:DefaultInstrView}
otherViewMap.update(DigitizerViewMap.items())
otherViewMap.update(DCSourcesViewMap.items())
otherViewMap.update(AttenuatorsViewMap.items())

newOtherInstrs = [Digitizers.AlazarATS9870, Analysers.HP71000, Analysers.SpectrumAnalyzer, DCSources.YokoGS200, Attenuators.DigitalAttenuator]

enamldef InstrumentManagerView(Container):
	attr instrLib
	Notebook:
		tab_style = 'preferences'
		Page:
			title = 'uwSources'
			closable = False
			DictManagerView:
				dictManager = instrLib.sources
				# displayFilter = lambda x : isinstance(x, MicrowaveSources.MicrowaveSource)
				# modelName = 'uwSource'
				# viewMap = MicrowaveSourceViewMap
				# newClassList = MicrowaveSources.MicrowaveSourceList

		# Page:
		# 	title = "AWG's"
		# 	closable = False
		# 	DictManagerView:
		# 		myDict = instrLib.instrDict
		# 		displayFilter = lambda x : isinstance(x, AWGs.AWG)
		# 		modelName = 'awg'
		# 		viewMap = AWGViewMap
		# 		newClassList = AWGs.AWGList
		
		# Page:
		# 	title = "Other"
		# 	closable = False
		# 	DictManagerView:
		# 		myDict = instrLib.instrDict
		# 		displayFilter = lambda x : not isinstance(x, AWGs.AWG) and not isinstance(x, MicrowaveSources.MicrowaveSource)
		# 		modelName = 'instr'
		# 		viewMap = otherViewMap
		# 		newClassList = newOtherInstrs

enamldef InstrumentManagerWindow(Window): 
	attr instrLib
	title = 'Instrument Library'
	InstrumentManagerView:
		instrLib = parent.instrLib


