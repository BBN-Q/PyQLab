from enaml.widgets.api import Window, Container, Notebook, Page, PushButton, GroupBox, Form, Label, Field
from enaml.layout.api import hbox, vbox, spacer
from enaml.core.api import Looper, Include

import MicrowaveSources, AWGs, Digitizers, Analysers, DCSources, Attenuators

from AWGsViews import AWGViewMap
from MicrowaveSourcesViews import MicrowaveSourceViewMap
from DigitizersViews import DigitizerViewMap
from DCSourcesViews import DCSourcesViewMap
from AttenuatorsViews import AttenuatorsViewMap

from DictManagerView import DictManagerView

from ExpSettingsVal import is_valid_instrument_name

from plugins import find_view_maps

enamldef EmptyInstrView(Container):
	attr instr
	attr instrumentLib

#For standard instruments just display the name and address field
enamldef DefaultInstrView(GroupBox):
	hug_width = 'medium'
	attr instr
	attr instrumentLib
	title := '{} ({})'.format(instr.label, instr.__class__.__name__)
	Form:
		Label:
			text = 'Address'
		Field:
			text := instr.address

otherViewMap = {type(None):EmptyInstrView, Analysers.HP71000:DefaultInstrView, Analysers.SpectrumAnalyzer:DefaultInstrView}
otherViewMap.update(DigitizerViewMap.items())
otherViewMap.update(DCSourcesViewMap.items())
otherViewMap.update(AttenuatorsViewMap.items())

# add plugins maps
find_view_maps(Digitizers.Digitizer, otherViewMap)
find_view_maps(AWGs.AWG, AWGViewMap)

enamldef InstrumentManagerView(Container):
	attr instrLib
	Notebook:
		tab_style = 'preferences'
		Page:
			title = 'uwSources'
			closable = False
			DictManagerView:
				dictManager = instrLib.sources
				viewMap = MicrowaveSourceViewMap
				modelName = 'uwSource'
				labelValidator = is_valid_instrument_name

		Page:
			title = "AWG's"
			closable = False
			DictManagerView:
				dictManager = instrLib.AWGs
				viewMap = AWGViewMap
				modelName = 'awg'
				viewkwargs = {'instrumentLib': instrLib.instrDict}
				labelValidator = is_valid_instrument_name

		Page:
			title = "Other"
			closable = False
			DictManagerView:
				dictManager = instrLib.others
				viewMap = otherViewMap
				modelName = 'instr'
				viewkwargs = {'instrumentLib': instrLib.instrDict}
				labelValidator = is_valid_instrument_name

enamldef InstrumentManagerWindow(Window):
	attr instrLib
	title = 'Instrument Library'
	InstrumentManagerView:
		instrLib = parent.instrLib
