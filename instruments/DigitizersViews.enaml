from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, CheckBox, \
 ComboBox, PushButton, ToolBar, Action, FlowArea, FlowItem, ScrollArea
from enaml.stdlib.fields import FloatField, IntField, Field
from enaml.core.api import Include
from enaml.layout.api import hbox, vbox, spacer

from widgets import EnumComboBox

from enaml.validator import Validator
from atom.api import Int

from . import Digitizers

class RecordLengthValidator(Validator):
	lengthMult = Int(64)
	"""
	Validator for records which much be a mulitple of 64 (Alazar) or 16 (Acquiris)
	"""
	def validate(self, text):
		try:
			check = int(text)%self.lengthMult
		except ValueError:
			return False
		if check == 0:
			return True
		else:
			return False

	def fixup(self, text):
		try:
			check = int(text)%self.lengthMult
			return str(int(text)/self.lengthMult)
		except ValueError:
			return "0"


class SampleRateValidator(Validator):
	"""
	Validate the Alazar decimation ratio. Rate is achieved by dividing 1GS clock and the divider must be 1,2,4 or 10x
	"""
	def validate(self, text):
		#arbitrarily, 5 decimal places is good enough
		divider = round(1e3/float(text),5)
		if divider in [1, 2, 4] + [10*x for x in range(1, 1001)]:
			return True
		else:
			return False


enamldef AlazarView(GroupBox):
	attr instr
	attr instrumentLib
	title = '{} ({})'.format(instr.label, instr.__class__.__name__)
	ScrollArea:
		Container:
			hug_width = 'medium'
			Form:
				Label:
					text = 'Address:'
				Field:
					text := instr.address

				Label:
					text = 'Acquisition Mode:'
				EnumComboBox:
					obj := instr
					enumName = 'acquire_mode'
				Label:
					text = 'Trigger Delay:'
				FloatField:
					value := instr.delay
					tool_tip = instr.get_member('delay').metadata['desc']
				Label:
					text = 'Sampling Rate (M):'
				FloatField:
					minimum = 0.0
					maximum = 1200.0
					validator = SampleRateValidator()
					value <<  instr.sampling_rate/1e6
					value :: instr.sampling_rate = value*1e6
					tool_tip = instr.get_member('sampling_rate').metadata['desc']
				Label:
					text = 'Scale:'
				FloatField:
					value := instr.vertical_scale
					tool_tip = instr.get_member('vertical_scale').metadata['desc']
				Label:
					text = 'Offset:'
				FloatField:
					value := instr.vertical_offset
					tool_tip = instr.get_member('vertical_offset').metadata['desc']
				Label:
					text = 'Coupling:'
				EnumComboBox:
					obj := instr
					enumName = 'vertical_coupling'
				Label:
					text = 'Bandwidth:'
				EnumComboBox:
					obj := instr
					enumName = 'bandwidth'
				Label:
					text = 'Samples'
				IntField:
					validator = RecordLengthValidator(lengthMult=64)
					value := instr.record_length
					tool_tip = instr.get_member('record_length').metadata['desc']
				Label:
					text = 'Segments'
				IntField:
					value := instr.nbr_segments
					tool_tip = instr.get_member('nbr_segments').metadata['desc']
				Label:
					text = 'Waveforms'
				IntField:
					value := instr.nbr_waveforms
					tool_tip = instr.get_member('nbr_waveforms').metadata['desc']
				Label:
					text = 'Round Robins:'
				IntField:
					value := instr.nbr_round_robins
					tool_tip = instr.get_member('nbr_round_robins').metadata['desc']
				Label:
					text = 'Trigger Level:'
				FloatField:
					value := instr.trigger_level
					tool_tip = instr.get_member('trigger_level').metadata['desc']
				Label:
					text = 'Trigger Source:'
				EnumComboBox:
					obj := instr
					enumName = 'trigger_source'
				Label:
					text = 'Trigger Coupling:'
				EnumComboBox:
					obj := instr
					enumName = 'trigger_coupling'
				Label:
					text = 'Trigger Slope:'
				EnumComboBox:
					obj := instr
					enumName = 'trigger_slope'

enamldef TestAlazarWindow(Window): tester:
	attr instr
	title = 'Test Alazar Window'
	AlazarView:
		instr := tester.instr

enamldef X6View(GroupBox):
	attr instr
	attr instrumentLib
	title = '{} ({})'.format(instr.label, instr.__class__.__name__)
	ScrollArea:
		Container:
			hug_width = 'medium'
			Form:
				Label:
					text = 'Device ID'
				Field:
					text := instr.address
				Label:
					text = "Reference Source"
				EnumComboBox:
					obj := instr
					enumName = 'reference'
				Label:
					text = 'Acquisition Mode:'
				EnumComboBox:
					obj := instr
					enumName = 'digitizer_mode'
				Label:
					text = 'Samples'
				IntField:
					validator = RecordLengthValidator(lengthMult=128)
					value := instr.record_length
					tool_tip = instr.get_member('record_length').metadata['desc']
				Label:
					text = 'Segments'
				IntField:
					value := instr.nbr_segments
					tool_tip = instr.get_member('nbr_segments').metadata['desc']
				Label:
					text = 'Waveforms'
				IntField:
					value := instr.nbr_waveforms
					tool_tip = instr.get_member('nbr_waveforms').metadata['desc']
				Label:
					text = 'Round Robins:'
				IntField:
					value := instr.nbr_round_robins
					tool_tip = instr.get_member('nbr_round_robins').metadata['desc']

enamldef TestX6Window(Window): tester:
	attr instr
	title = 'Test X6 Window'
	Container:
		X6View:
			instr := tester.instr
		PushButton:
			text = 'Test'
			clicked ::
				import ipdb; ipdb.set_trace()

DigitizerViewMap = {Digitizers.ATS9870:AlazarView, Digitizers.X6:X6View}
