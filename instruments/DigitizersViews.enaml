from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, CheckBox, \
 ComboBox, PushButton, ToolBar, Action, FlowArea, FlowItem, ScrollArea
from enaml.stdlib.fields import FloatField, IntField, Field
from enaml.layout.api import hbox, vbox, spacer

from widgets import EnumComboBox

from enaml.validator import Validator
from atom.api import Int

import Digitizers

class RecordLengthValidator(Validator):
	lengthMult = Int(64)
	"""
	Validator for records which much be a mulitple of 64 (Alazar) or 16 (Acquiris)
	"""
	def validate(self, text, component):
		try: 
			check = int(text)%self.lengthMult
		except ValueError:
			return text, False
		if check == 0:
			return text, True
		else:
			return text, False

class SampleRateValidator(Validator):
	"""
	Validate the Alazar decimation ratio. Rate is achieved by dividing 1GS clock and the divider must be 1,2,4 or 10x
	"""
	def validate(self, text, component):
		#arbitrarily, 5 decimal places is good enough
		divider = round(1e3/float(text),5)
		if divider in [1, 2, 4] + [10*x for x in range(1, 1001)]:
			return text, True
		else:
			return text, False


enamldef AlazarView(GroupBox):
	attr instr
	title = '{} ({})'.format(instr.label, instr.__class__.__name__)
	ScrollArea:
		Container:
			hug_width = 'medium'
			GroupBox: 
				title = 'Horizontal'
				Form:
					Label:
						text = 'Acquisition Mode:'
					EnumComboBox:
						obj := instr
						enumName = 'acquireMode'
					Label:
						text = 'Trigger Delay:'
					FloatField:
						value := instr.delay
						tool_tip = instr.get_member('delay').metadata['desc']
					Label:
						text = 'Sampling Rate (M):'
					FloatField:
						minimum = 0.0
						maximum = 1200.0
						validator = SampleRateValidator()
						value <<  instr.samplingRate/1e6
						value :: instr.samplingRate = value*1e6
						tool_tip = instr.get_member('samplingRate').metadata['desc']
			GroupBox: 
				title = 'Vertical'
				Form:
					Label:
						text = 'Scale:'
					FloatField:
						value := instr.verticalScale
						tool_tip = instr.get_member('verticalScale').metadata['desc']
					Label:
						text = 'Offset:'
					FloatField:
						value := instr.verticalOffset
						tool_tip = instr.get_member('verticalOffset').metadata['desc']
					Label:
						text = 'Coupling:'
					EnumComboBox:
						obj := instr
						enumName = 'verticalCoupling'
					Label:
						text = 'Bandwidth:'
					EnumComboBox:
						obj := instr
						enumName = 'bandwidth'
			GroupBox: 
				title = 'Averager'
				Form:
					Label:
						text = 'Samples'
					IntField:
						validator = RecordLengthValidator(lengthMult=64)
						value := instr.recordLength
						tool_tip = instr.get_member('recordLength').metadata['desc']
					Label: 
						text = 'Segments'
					IntField:
						value := instr.nbrSegments
						tool_tip = instr.get_member('nbrSegments').metadata['desc']
					Label:
						text = 'Waveforms'
					IntField:
						value := instr.nbrWaveforms
						tool_tip = instr.get_member('nbrWaveforms').metadata['desc']
					Label:
						text = 'Round Robins:'
					IntField:
						value := instr.nbrRoundRobins
						tool_tip = instr.get_member('nbrRoundRobins').metadata['desc']
			GroupBox: 
				title = 'Trigger'
				Form:
					Label:
						text = 'Level:'
					FloatField:
						value := instr.triggerLevel
						tool_tip = instr.get_member('triggerLevel').metadata['desc']
					Label:
						text = 'Source:'
					EnumComboBox:
						obj := instr
						enumName = 'triggerSource'
					Label:
						text = 'Coupling:'
					EnumComboBox:
						obj := instr
						enumName = 'triggerCoupling'
					Label:
						text = 'Slope:'
					EnumComboBox:
						obj := instr
						enumName = 'triggerSlope'

enamldef TestAlazarWindow(Window): tester:
	attr instr
	title = 'Test Alazar Window'
	AlazarView:
		instr := tester.instr

DigitizerViewMap = {Digitizers.AlazarATS9870:AlazarView}
