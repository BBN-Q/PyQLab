from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, CheckBox, ComboBox, \
            StackItem, FileDialog, PushButton
from enaml.layout.api import hbox, vbox, spacer
from enaml.stdlib.fields import FloatField, IntField
from enaml.core.api import Looper, Include, Conditional

from widgets import EnumComboBox

import AWGs
import config

enamldef ChannelView(GroupBox): 
    attr chan
    attr number
    share_layout=True
    title = 'Ch. {}'.format(number)
    padding = 0
    Form:
        hug_width='medium'
        padding = 2
        share_layout=True
        Label: 
            text = 'Amp.'
        FloatField:
            constraints = [width == 50]
            maximum = 4.0
            minimum = 0.0
            value := chan.amplitude
            tool_tip = chan.get_member('amplitude').metadata["desc"]
        Label: 
            text = 'Offset'
        FloatField:
            constraints = [width == 50]
            maximum = 1.0
            minimum = -1.0
            value := chan.offset
            tool_tip = chan.get_member('offset').metadata["desc"]
        Label:
            text = 'Enabled'
        CheckBox:
            checked := chan.enabled
            tool_tip = chan.get_member('enabled').metadata["desc"]


def get_seq_file_callback(awg):
    def seq_file_callback(dlg):
        if dlg.result == 'accepted': #if the pressed "open" otherwise we get 'rejected'
            awg.seqFile = dlg.path
    return seq_file_callback

enamldef AWGForm(GroupBox): myAWGForm:
    attr awg
    padding = 5
    title = '{} ({})'.format(awg.label, awg.__class__.__name__)
    constraints = [
        vbox(
            hbox(formItems1, formItems2, spacer),
            channels
        )
    ]
    Form: formItems1:
        hug_width = 'medium'
        Label:
            text = 'Master'
        CheckBox:
            checked := myAWGForm.awg.isMaster
        Label: 
            text = 'Address'
        Field: 
            text := myAWGForm.awg.address
        Label:
            text = 'Trigger Interval'
        FloatField:
            maximum = 15.0
            minimum = 10e-9
            value := myAWGForm.awg.triggerInterval
            tool_tip = myAWGForm.awg.get_member('triggerInterval').metadata["desc"]
        Label:
            text = "Trigger Source"
        EnumComboBox:
            obj := myAWGForm.awg
            enumName = 'triggerSource'

    Form: formItems2:
        Conditional:
            condition = not isinstance(myAWGForm.awg, AWGs.APS2TDM)
            Label:
                text = 'Sequence Reload'
            CheckBox:
                checked := myAWGForm.awg.seqForce
            Field:
                text := myAWGForm.awg.seqFile
            PushButton:
                text = '...'
                clicked ::
                    dlg = FileDialog(root_object(), title='Choose a sequence file..', mode='open_file',
                     callback=get_seq_file_callback(awg), filters=['Seq. Files (*.awg *.h5)', 'All Files (*.*)'], 
                     path=config.AWGDir)
                    dlg.open()
            Conditional:
                condition = isinstance(myAWGForm.awg, AWGs.APS)
                Label:
                    text = 'Mini LL Repeat'
                IntField:
                    value := myAWGForm.awg.miniLLRepeat
                    tool_tip = myAWGForm.awg.get_member('miniLLRepeat').metadata["desc"]
            Label:
                text = 'Delay'
            FloatField:
                value := myAWGForm.awg.delay
                tool_tip = myAWGForm.awg.get_member('delay').metadata["desc"]
    Container: channels:
        constraints = [hbox(hbox(*inc.objects), spacer)]
        Include: inc:
            objects << [ChannelView(chan=chan, number=ct+1) for ct,chan in enumerate(myAWGForm.awg.channels)]

enamldef AWGView(Window): main:
    attr awg
    title = awg.label
    Container:
        AWGForm:
            awg := main.awg

enamldef EmptyAWGForm(Container):
    attr awg

AWGViewMap = {type(None):EmptyAWGForm, AWGs.AWG:AWGForm}
