from enaml.widgets.api import Window, Container, Notebook, Page, PushButton, GroupBox, Form, Label, Field, \
                             ComboBox
from enaml.stdlib.fields import FloatField
from enaml.layout.api import hbox, vbox, spacer
from enaml.core.api import Looper, Conditional

from EnamlHelpers import DictManagerView, DictManager, AddDialog, EnumComboBox

import QGL.Channels
from instruments.AWGs import AWG
from instruments.MicrowaveSources import MicrowaveSource

import QGL.PulseShapes
from types import FunctionType
psList = [f for f in QGL.PulseShapes.__dict__.values() if isinstance(f, FunctionType)]

enamldef LogicalMarkerChannelView(GroupBox):
    id: curView
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} (LogicalMarker)'.format(chan.name)
    Form:
        Label:
            text = 'Physical Chan.'
        ComboBox:
            items << [item.name for item in curView.channelLib.channelDict.values() if isinstance(item, QGL.Channels.PhysicalMarkerChannel)]
            index << filter(lambda item : isinstance(item, QGL.Channels.PhysicalMarkerChannel), curView.channelLib.channelDict.values()).index(chan.physChan) if chan.physChan in curView.channelLib.channelDict.values() else -1
            index ::
                chan.physChan = filter(isinstance(item, QGL.Channels.PhysicalMarkerChannel), curView.channelLib.channelDict.values())[index]
        Looper:
            iterable << sorted(chan.pulseParams.keys())
            Label:
                text = loop_item
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], float) or isinstance(chan.pulseParams[loop_item], int)
                FloatField:
                    value << float(chan.pulseParams[loop_item])
                    value >> chan.pulseParams[loop_item]
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], FunctionType)
                ComboBox:
                    items << [f.__name__ for f in psList]
                    index << psList.index(chan.pulseParams[loop_item])
                    index ::
                        chan.pulseParams[loop_item] = psList[index]

enamldef PhysicalMarkerChannelView(GroupBox):
    id: curView
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} (PhysicalMarker)'.format(chan.name)
    Form:
        Label:
            text = 'Delay'
        FloatField:
            value := chan.delay
        Label:
            text = 'AWG'
        ComboBox:
            items << [item.name for item in curView.instrumentLib.AWGs] if curView.instrumentLib.AWGs else []
            index << instrumentLib.AWGs.index(chan.AWG) if instrumentLib.AWGs and (chan.AWG in curView.instrumentLib.AWGs) else -1
            index ::
                chan.AWG = instrumentLib.AWGs[index]

enamldef PhysicalQuadratureChannelView(GroupBox):
    id: curView
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} (PhysicalQuadrature)'.format(chan.name)
    Form:
        Label:
            text = 'AWG'
        ComboBox:
            items << [item.name for item in curView.instrumentLib.AWGs] if curView.instrumentLib.AWGs else []
            index << instrumentLib.AWGs.index(chan.AWG) if instrumentLib.AWGs and (chan.AWG in curView.instrumentLib.AWGs) else -1
            index ::
                chan.AWG = curView.instrumentLib.AWGs[index]
        Label:
            text = 'Source'
        ComboBox:
            items << [item.name for item in instrumentLib.sources] if instrumentLib.sources else []
            index << instrumentLib.sources.index(chan.generator) if instrumentLib.sources and (chan.generator in instrumentLib.sources) else -1
            index ::
                chan.generator = instrumentLib.sources[index]
        Label:
            text = 'Gate Channel'
        ComboBox:
            items << [item.name for item in curView.channelLib.channelDict.values() if isinstance(item, QGL.Channels.PhysicalMarkerChannel)]
            index << [item for item in curView.channelLib.channelDict.values() if isinstance(item, QGL.Channels.PhysicalMarkerChannel)].index(chan.gateChan) if chan.gateChan in curView.channelLib.channelDict.values() else -1
            index ::
                chan.gateChan = [item for item in curView.channelLib.channelDict.values() if isinstance(item, QGL.Channels.PhysicalMarkerChannel)][index]
        Label:
            text = 'Amp. Factor'
        FloatField:
            value := chan.ampFactor
        Label:
            text = 'Phase Skew (deg.)'
        FloatField:
            value := chan.phaseSkew

enamldef LogicalQuadratureView(GroupBox):
    id: curView
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} ({})'.format(chan.name, chan.__class__.__name__)
    Form:
        Conditional:
            condition = isinstance(chan, QGL.Channels.Measurement)
            Label:
                text = 'Type'
            EnumComboBox:
                myObj := chan
                traitName = 'measType'
            Conditional:
                condition << chan.measType == 'autodyne'
                Label:
                    text = 'Autodyne Freq.'
                FloatField:
                    value := chan.autodyneFreq
        Label:
            text = 'Physical Chan.'
        ComboBox:
            items << [item.name for item in curView.channelLib.channelDict.values() if isinstance(item, QGL.Channels.PhysicalQuadratureChannel)]
            index << [item for item in curView.channelLib.channelDict.values() if isinstance(item, QGL.Channels.PhysicalQuadratureChannel)].index(chan.physChan) if chan.physChan in curView.channelLib.channelDict.values() else -1
            index ::
                chan.physChan = [item for item in curView.channelLib.channelDict.values() if isinstance(item, QGL.Channels.PhysicalQuadratureChannel)][index]
        Looper:
            iterable << sorted(chan.pulseParams.keys())
            Label:
                text = loop_item
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], float) or isinstance(chan.pulseParams[loop_item], int)
                FloatField:
                    value << float(chan.pulseParams[loop_item])
                    value >> chan.pulseParams[loop_item]
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], FunctionType)
                ComboBox:
                    items << [f.__name__ for f in psList]
                    index << psList.index(chan.pulseParams[loop_item])
                    index ::
                        chan.pulseParams[loop_item] = psList[index]

enamldef EmptyChannelView(Container):
    attr chan
    attr channelLib
    attr instrumentLib

ChannelViewMap = {type(None):EmptyChannelView, QGL.Channels.Qubit:LogicalQuadratureView, QGL.Channels.Measurement:LogicalQuadratureView, 
                    QGL.Channels.LogicalMarkerChannel:LogicalMarkerChannelView, QGL.Channels.PhysicalQuadratureChannel:PhysicalQuadratureChannelView,
                    QGL.Channels.PhysicalMarkerChannel:PhysicalMarkerChannelView}

enamldef ChannelLibraryView(Container):
    id: channelLibCont
    attr channelLib
    attr instrumentLib
    Notebook:
        tab_style = 'preferences'
        Page:
            title = 'Logical'
            closable = False
            DictManagerView:
                myDict = channelLibCont.channelLib.channelDict
                displayFilter = lambda x : isinstance(x, QGL.Channels.LogicalChannel)
                modelName = 'chan'
                viewMap = ChannelViewMap
                viewkwargs = {'instrumentLib':channelLibCont.instrumentLib, 
                                'channelLib':channelLibCont.channelLib}
                addDialog = lambda root, itemDict : \
            AddDialog(root, itemDict=itemDict, newClassList=QGL.Channels.NewLogicalChannelList, objText='LogicalChannel')

        Page:
            title = "Physical"
            closable = False
            DictManagerView:
                myDict = channelLibCont.channelLib.channelDict
                displayFilter = lambda x : isinstance(x, QGL.Channels.PhysicalChannel)
                modelName = 'chan'
                viewMap = ChannelViewMap
                viewkwargs = {'instrumentLib':channelLibCont.instrumentLib, 
                                'channelLib':channelLibCont.channelLib}
                addDialog = lambda root, itemDict : \
                    AddDialog(root, itemDict=itemDict, newClassList=QGL.Channels.NewPhysicalChannelList, objText='PhysicalChannel')

enamldef ChannelLibraryWindow(Window):
    id: channelLibWin
    attr channelLib
    attr instrumentLib
    title = 'Channel Library'
    Container:
        ChannelLibraryView:
            channelLib = channelLibWin.channelLib
            instrumentLib = channelLibWin.instrumentLib
