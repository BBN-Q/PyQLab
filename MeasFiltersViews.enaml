from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, ComboBox, \
    CheckBox, PushButton, SpinBox 
from enaml.stdlib.fields import FloatField, IntField
from enaml.core.api import Conditional, Looper
from enaml.layout.api import hbox, vbox, spacer


from EnamlHelpers import DictManagerView, DictManager, AddDialog, EnumComboBox

import MeasFilters

from numpy import pi

enamldef DigitalHomodyneForm(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.name, myFilter.__class__.__name__)
    hug_width = 'medium'
    Form:
        Label:
            text = 'Box Car Start'
        IntField:
            value := myFilter.boxCarStart
            tool_tip = myFilter.trait('boxCarStart').desc
        Label:
            text = 'Box Car Stop'
        IntField:
            value := myFilter.boxCarStop
            tool_tip = myFilter.trait('boxCarStop').desc
        Label:
            text = 'I.F. Freq (MHz)'
        FloatField:
            value << myFilter.IFfreq/1e6
            value :: myFilter.IFfreq = value*1e6
            tool_tip = myFilter.trait('IFfreq').desc
        Label:
            text = 'Bandwidth (MHz)'
        FloatField:
            value << myFilter.bandwidth/1e6
            value :: myFilter.bandwidth = value*1e6
            tool_tip = myFilter.trait('bandwidth').desc
        Label:
            text = 'Sampling Rate (MS/s)'
        FloatField:
            value << myFilter.samplingRate/1e6
            value :: myFilter.samplingRate = value*1e6
            tool_tip = myFilter.trait('samplingRate').desc
        Label:
            text = "Phase (deg.)"
        FloatField:
            value << (180/pi)*myFilter.phase
            value :: myFilter.phase = (pi/180)*value
        Label:
            text = "Source Channel"
        SpinBox:
            minimum = 1
            maximum = 2
            value := myFilter.channel
        Label: 
            text = "Plot scope"
        CheckBox:
            checked := myFilter.plotScope
        Label:
            text = "Plot mode"
        EnumComboBox:
            myObj := myFilter
            traitName = 'plotMode'
        Label:
            text = 'Filter File Path'
        Field:
            text := myFilter.filterFilePath
            tool_tip = myFilter.trait('filterFilePath').desc
        Label:
            text = 'Records File'
        Field:
            text := myFilter.recordsFilePath
            tool_tip = myFilter.trait('recordsFilePath').desc
        Label: 
            text = "Save records"
        CheckBox:
            checked := myFilter.saveRecords


def update_filter_list(correlatorFilter, filterLib, objs):
    del correlatorFilter.filters[:]
    for obj in objs:
        comboBoxIdx = obj[0].children[1].index
        if comboBoxIdx>-1:
            filterName = obj[0].children[1].items[comboBoxIdx]
            correlatorFilter.filters.append(filterLib[filterName])

enamldef CorrelatorView(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.name, myFilter.__class__.__name__)
    Form:
        Label:
            text = 'Num. Channels'
        SpinBox:
            id: numFiltersBox
            minimum = 2
            value = len(myFilter.filters) if myFilter.filters and (len(myFilter.filters) > 0) else 2
        Looper: filterLooper:
            iterable << range(numFiltersBox.value)
            Form:
                #Should work but trashes the filter list
                # initialized :: update_filter_list(myFilter, filterLib, filterLooper.items)
                Label:
                    text = 'Filter {}:'.format(loop_index+1)
                ComboBox:
                    items << filterLib.filterDict.keys()
                    index << filterLib.filterDict.values().index(myFilter.filters[loop_index]) if myFilter.filters and loop_index < len(myFilter.filters) else -1
                    index :: update_filter_list(myFilter, filterLib, filterLooper.items)

enamldef MeasFilterWindow(Window):
    id: filterTest
    attr myFilter
    DigitalHomodyneForm:
        myFilter := filterTest.myFilter

#Dummy empty view
enamldef EmptyMeasFilterForm(Container):
    attr myFilter
    attr filterLib

#Map filters to views
filterViewMap = {type(None):EmptyMeasFilterForm, MeasFilters.DigitalHomodyne:DigitalHomodyneForm,
                    MeasFilters.Correlator:CorrelatorView}

enamldef MeasFilterManager(Container):
    id: measFilterManager
    attr filterLib
    DictManagerView:
        myDict = filterLib.filterDict
        modelName = 'myFilter'
        viewMap = filterViewMap
        viewkwargs = {'filterLib':filterLib}
        addDialog = lambda root, filterDict=filterLib.filterDict, filterList=filterLib.filterList : \
            AddDialog(root, itemDict=filterDict, newClassList=filterList, objText='Filter')

enamldef MeasFilterManagerWindow(Window):
    id: measFilterManagerTest
    attr filterLib
    title = 'Filter Manager'
    MeasFilterManager:
        filterLib := measFilterManagerTest.filterLib
