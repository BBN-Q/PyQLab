from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, ComboBox, \
	PushButton, SpinBox, StackItem
from enaml.stdlib.fields import FloatField, IntField
from enaml.core.api import Conditional
from enaml.layout.api import hbox, vbox, spacer


from EnamlHelpers import DictManagerView, DictManager

enamldef DigitalHomodyneForm(GroupBox):
	attr myFilter
	title := myFilter.name
	Form:
		Label:
			text = 'Box Car Start'
		IntField:
			value := myFilter.boxCarStart
			tool_tip = myFilter.trait('boxCarStart').desc
		Label:
			text = 'Box Car Stop'
		IntField:
			value := myFilter.boxCarStop
			tool_tip = myFilter.trait('boxCarStop').desc
		Label:
			text = 'I.F. Freq'
		FloatField:
			value := myFilter.IFfreq
			tool_tip = myFilter.trait('IFfreq').desc
		Label:
			text = 'Sampling Rate'
		FloatField:
			value := myFilter.samplingRate
			tool_tip = myFilter.trait('samplingRate').desc
		Label:
			text = "Source Channel"
		SpinBox:
			minimum = 1
			maximum = 2
			value := myFilter.channel

enamldef FilterStackView(StackItem):
	id: fsk
	attr myFilter
	Conditional:
		#isinstance(myFilter, DigitalHomodyne) shoudl work but doesn't return true
		condition = myFilter.__class__.__name__ == 'DigitalHomodyne'
		DigitalHomodyneForm:
			myFilter := fsk.myFilter

enamldef MeasFilterWindow(Window):
	id: filterTest
	attr myFilter
	DigitalHomodyneForm:
		myFilter := filterTest.myFilter

enamldef AddFilterDialog(Window):
	title = 'Add a new source...'
	modality = 'window_modal'
	attr filterDict
	attr filterList
	Container:
		constraints = [vbox(modelChoiceLabel, modelChoiceCombo, hbox(spacer, okButton, cancelButton))]
		Label: modelChoiceLabel:
			text = 'New Filter Model'
		ComboBox: modelChoiceCombo:
			index = 0
			items = [f.__name__ for f in filterList]
		PushButton: okButton:
			text = 'OK'
			clicked ::
				filterDict.update({'NewFilter':filterList[modelChoiceCombo.index](name='NewFilter')})
				close()
		PushButton: cancelButton:
			text = 'Cancel'
			clicked ::
				close()

enamldef MeasFilterManagerWindow(Window):
	id: measFilterManagerTest
	attr filterLib
	title = 'Filter Manager'
	DictManagerView:
		dictManager = DictManager(itemDict=filterLib.filterDict, dictName='filterDict')
		addDialog = lambda root, filterDict, filterList=measFilterManagerTest.filterLib.filterList : AddFilterDialog(root, filterDict=filterDict, filterList=filterList)

