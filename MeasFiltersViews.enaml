from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, ComboBox, \
    CheckBox, PushButton, SpinBox, RadioButton, FileDialog
from enaml.stdlib.fields import FloatField, IntField
from enaml.core.api import Conditional, Looper
from enaml.layout.api import hbox, vbox, spacer

from instruments.Digitizers import AlazarATS9870, X6

from widgets import EnumComboBox
from DictManagerView import DictManagerView

import config
import MeasFilters
from numpy import pi

enamldef AlazarStreamSelectorView(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    hug_width = 'medium'
    Form:
        Label:
            text = "Digitizer"
        ComboBox:
            items << [k for k, v in instrumentLib.instrDict.items() if isinstance(v, AlazarATS9870)]
            index = items.index(myFilter.data_source) if myFilter.data_source in items else -1
            index ::
                myFilter.data_source = instrumentLib[selected_item]
        Label:
            text = "Channel"
        IntField:
            value := myFilter.channel
            tool_tip = myFilter.get_member('channel').metadata['desc']

enamldef X6StreamSelectorView(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title = 'Ch. {}'.format(myFilter.label)
    hug_width = 'medium'
    Form:
        hug_width = 'medium'
        Label:
            text = 'Digitizer'
        ComboBox:
            items << [k for k, v in instrumentLib.instrDict.items() if isinstance(v, X6)]
            index = items.index(myFilter.data_source) if myFilter.data_source in items else -1
            index ::
                myFilter.data_source = instrumentLib[selected_item]
        Label:
            text = "Phys Channel"
        IntField:
            value := myFilter.phys_channel
            tool_tip = myFilter.get_member('phys_channel').metadata['desc']
        Conditional:
            condition << (myFilter.stream_type != 'Raw')
            Label:
                text = "DSP Channel"
            IntField:
                value := myFilter.dsp_channel
                tool_tip = myFilter.get_member('dsp_channel').metadata['desc']
        Label:
            text = 'Stream Type'
        EnumComboBox:
            obj := myFilter
            enumName = 'stream_type'
        Conditional:
            condition << (myFilter.stream_type == 'Demodulated')
            Label:
                text = 'IF Frequency (MHz)'
            FloatField:
                value << myFilter.if_freq/1e6
                value :: myFilter.if_freq = value*1e6
                tool_tip = myFilter.get_member('if_freq').metadata["desc"]
        Conditional:
            condition << (myFilter.stream_type == 'Integrated')
            Label:
                text = 'Kernel'
            Field:
                text := myFilter.kernel
                tool_tip = myFilter.get_member('kernel').metadata["desc"]
            Label:
                text = 'Kernel Bias'
            Field:
                text := myFilter.kernel_bias
                tool_tip = myFilter.get_member('kernel_bias').metadata["desc"]
            Label:
                text = 'Threshold'
            FloatField:
                value := myFilter.threshold
                tool_tip = myFilter.get_member('threshold').metadata["desc"]
            Label:
                text = 'Invert threshold'
            CheckBox:
                checked := myFilter.threshold_invert
                tool_tip = myFilter.get_member('threshold_invert').metadata["desc"]

enamldef ChannelizerForm(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    hug_width = 'medium'
    Form:
        Label:
            text = 'I.F. Freq (MHz)'
        FloatField:
            value << myFilter.if_freq/1e6
            value :: myFilter.if_freq = value*1e6
            tool_tip = myFilter.get_member('if_freq').metadata['desc']
        Label:
            text = 'Bandwidth (MHz)'
        FloatField:
            value << myFilter.bandwidth/1e6
            value :: myFilter.bandwidth = value*1e6
            tool_tip = myFilter.get_member('bandwidth').metadata['desc']
        Label:
            text = 'Sampling Rate (MS/s)'
        FloatField:
            value << myFilter.sampling_rate/1e6
            value :: myFilter.sampling_rate = value*1e6
            tool_tip = myFilter.get_member('sampling_rate').metadata['desc']
        Label:
            text = "First Stage Decimation"
        IntField:
            value := myFilter.decim_factor_1
            tool_tip = myFilter.get_member('decim_factor_1').metadata['desc']
        Label:
            text = "Second Stage Decimation"
        IntField:
            value := myFilter.decim_factor_2
            tool_tip = myFilter.get_member('decim_factor_2').metadata['desc']
        Label:
            text = "Third Stage Decimation"
        IntField:
            value := myFilter.decim_factor_3
            tool_tip = myFilter.get_member('decim_factor_3').metadata['desc']
        Label:
            text = "Phase (deg.)"
        FloatField:
            value << (180/pi)*myFilter.phase
            value :: myFilter.phase = (pi/180)*value
        Label:
            text = "Data source"
        Field:
            text := myFilter.data_source

enamldef KernelIntegratorForm(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Data source"
        Field:
            text := myFilter.data_source
        Label:
            text = 'Arbitrary kernel'
        Field:
            text := myFilter.kernel
            tool_tip = myFilter.get_member('kernel').metadata["desc"]
        Label:
            text = 'Simple kernel'
        GroupBox:
            Form:
                Label:
                    text = 'Box car start'
                IntField:
                    value := myFilter.box_car_start
                Label:
                    text = 'Box car stop'
                IntField:
                    value := myFilter.box_car_stop
                Label:
                    text = 'IF frequency (MHz)'
                FloatField:
                    value << myFilter.if_freq / 1e6
                    value :: myFilter.if_freq = value * 1e6
                Label:
                    text = 'Sampling rate (MS/s)'
                FloatField:
                    value << myFilter.sampling_rate / 1e6
                    value :: myFilter.sampling_rate = value * 1e6
        Label:
            text = ''
        Container:
            constraints = [hbox(rb1, rb2, spacer)]
            RadioButton: rb1:
                text = 'arbitrary'
                checked << not myFilter.simple_kernel
            RadioButton: rb2:
                text = 'simple'
                checked := myFilter.simple_kernel
        Label:
            text = 'Bias'
        FloatField:
            value := myFilter.bias
            tool_tip = myFilter.get_member('bias').metadata["desc"]

enamldef PlotterView(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Plot mode"
        EnumComboBox:
            obj := myFilter
            enumName = 'plot_mode'
        Label:
            text = "Data source"
        Field:
            text := myFilter.data_source

def get_h5_filename_callback(filt):
    def h5_filename_callback(dlg):
        if dlg.result == 'accepted': #if the pressed "open" otherwise we get 'rejected'
            filt.filename = dlg.path
    return h5_filename_callback

enamldef WriteToHDF5View(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Filename"
        Field:
            text := myFilter.filename
        Label:
            text = "Browse"
        PushButton:
            text = '...'
            clicked ::
                dlg = FileDialog(root_object(), title='Choose a file name..', mode='save_file',
                 callback=get_h5_filename_callback(myFilter), filters=['Data. Files (*.h5)', 'All Files (*.*)'],
                 path=config.AWGDir)
                dlg.open()
        Label:
            text = "Group Name"
        Field:
            text := myFilter.groupname
        Label:
            text = "Compression"
        CheckBox:
            checked := myFilter.compression
        Label:
            text = "Data source"
        Field:
            text := myFilter.data_source

enamldef AveragerView(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Averaging Axis"
        Field:
            text := myFilter.axis
        Label:
            text = "Data source"
        Field:
            text := myFilter.data_source

def filterLooperGetIndex(items, myFilter, loop_index):
    if loop_index < len(myFilter.filters) and \
        myFilter.filters[loop_index].label in items:
        return items.index(myFilter.filters[loop_index].label)
    else:
        return -1

enamldef CorrelatorView(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = 'Num. Channels'
        SpinBox: numFiltersBox:
            minimum = 2
            value = len(myFilter.filters) if myFilter.filters and (len(myFilter.filters) > 0) else 2
        Looper: filterLooper:
            iterable << range(numFiltersBox.value)
            iterable ::
                if len(myFilter.filters) > len(iterable):
                    myFilter.filters = myFilter.filters[:numFiltersBox.value]
                elif len(myFilter.filters) < len(iterable):
                    myFilter.filters += [None]
            Form:
                Label:
                    text = 'Filter {}:'.format(loop_index+1)
                ComboBox:
                    items << list(filterLib.filterDict.keys())
                    index << filterLooperGetIndex(items, myFilter, loop_index)
                    index ::
                        myFilter.filters[loop_index] = filterLib.filterDict[selected_item]

enamldef StateComparatorView(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Data source"
        Field:
            text := myFilter.data_source
        Label:
            text = 'Threshold'
        FloatField:
            value := myFilter.threshold
        Label:
            text = 'Integration time (samples)'
        IntField:
            value := myFilter.integration_time
            tool_tip = myFilter.get_member('integration_time').metadata['desc']

enamldef StreamSelectorView(GroupBox):
    attr myFilter
    attr filterLib
    attr instrumentLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Data source"
        Field:
            text := myFilter.data_source
        Label:
            text = 'Stream'
        Field:
            text := myFilter.stream

#Dummy empty view
enamldef EmptyMeasFilterForm(Container):
    attr myFilter
    attr filterLib
    attr instrumentLib

#Map filters to views
filterViewMap = {type(None): EmptyMeasFilterForm,
    MeasFilters.Channelizer: ChannelizerForm,
    MeasFilters.KernelIntegrator: KernelIntegratorForm,
    MeasFilters.Correlator: CorrelatorView,
    MeasFilters.StateComparator: StateComparatorView,
    MeasFilters.AlazarStreamSelector: AlazarStreamSelectorView,
    MeasFilters.X6StreamSelector: X6StreamSelectorView,
    MeasFilters.WriteToHDF5: WriteToHDF5View,
    MeasFilters.Averager: AveragerView,
    MeasFilters.Plotter: PlotterView}

enamldef MeasFilterManager(Container): measFilterManager:
    attr filterLib
    attr instrumentLib
    DictManagerView:
        dictManager = filterLib.filterManager
        modelName = 'myFilter'
        viewMap = filterViewMap
        viewkwargs = {'filterLib':filterLib,
                      'instrumentLib': instrumentLib}

enamldef MeasFilterManagerWindow(Window): measFilterManagerTest:
    attr filterLib
    attr instrumentLib
    title = 'Filter Manager'
    MeasFilterManager:
        filterLib := measFilterManagerTest.filterLib
