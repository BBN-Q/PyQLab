from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, ComboBox, \
    CheckBox, PushButton, SpinBox 
from enaml.stdlib.fields import FloatField, IntField
from enaml.core.api import Conditional, Looper
from enaml.layout.api import hbox, vbox, spacer


from widgets import EnumComboBox
from DictManagerView import DictManagerView

import MeasFilters

from numpy import pi

enamldef RawStreamForm(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    hug_width = 'medium'
    Form:
        Label:
            text = "Data source"
        Field:
            text := myFilter.dataSource
            tool_tip = myFilter.get_member('dataSource').metadata['desc']
        Label:
            text = "Channel"
        Field:
            text := myFilter.channel
            tool_tip = myFilter.get_member('channel').metadata['desc']
        Label:
            text = 'Records File'
        Field:
            text := myFilter.recordsFilePath
            tool_tip = myFilter.get_member('recordsFilePath').metadata['desc']
        Label: 
            text = "Save records"
        CheckBox:
            checked := myFilter.saveRecords
            tool_tip = myFilter.get_member('saveRecords').metadata['desc']
        Label: 
            text = "Plot scope"
        CheckBox:
            checked := myFilter.plotScope
        Label:
            text = "Plot mode"
        EnumComboBox:
            obj := myFilter
            enumName = 'plotMode'

enamldef DigitalDemodForm(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    hug_width = 'medium'
    Form:
        Label:
            text = 'I.F. Freq (MHz)'
        FloatField:
            value << myFilter.IFfreq/1e6
            value :: myFilter.IFfreq = value*1e6
            tool_tip = myFilter.get_member('IFfreq').metadata['desc']
        Label:
            text = 'Bandwidth (MHz)'
        FloatField:
            value << myFilter.bandwidth/1e6
            value :: myFilter.bandwidth = value*1e6
            tool_tip = myFilter.get_member('bandwidth').metadata['desc']
        Label:
            text = 'Sampling Rate (MS/s)'
        FloatField:
            value << myFilter.samplingRate/1e6
            value :: myFilter.samplingRate = value*1e6
            tool_tip = myFilter.get_member('samplingRate').metadata['desc']
        Label:
            text = "First Stage Decimation"
        IntField:
            value := myFilter.decimFactor1
            tool_tip = myFilter.get_member('decimFactor1').metadata['desc']
        Label:
            text = "Second Stage Decimation"
        IntField:
            value := myFilter.decimFactor2
            tool_tip = myFilter.get_member('decimFactor2').metadata['desc']
        Label:
            text = "Third Stage Decimation"
        IntField:
            value := myFilter.decimFactor3
            tool_tip = myFilter.get_member('decimFactor3').metadata['desc']
        Label:
            text = "Phase (deg.)"
        FloatField:
            value << (180/pi)*myFilter.phase
            value :: myFilter.phase = (pi/180)*value
        Label:
            text = "Data source"
        Field:
            text := myFilter.dataSource
        Label: 
            text = "Plot scope"
        CheckBox:
            checked := myFilter.plotScope
        Label:
            text = "Plot mode"
        EnumComboBox:
            obj := myFilter
            enumName = 'plotMode'
        Label:
            text = 'Records File'
        Field:
            text := myFilter.recordsFilePath
            tool_tip = myFilter.get_member('recordsFilePath').metadata['desc']
        Label: 
            text = "Save records"
        CheckBox:
            checked := myFilter.saveRecords
            tool_tip = myFilter.get_member('saveRecords').metadata['desc']

enamldef KernelIntegrationForm(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Data source"
        Field:
            text := myFilter.dataSource
        Label:
            text = 'Kernel'
        Field:
            text := myFilter.kernel
            tool_tip = myFilter.get_member('kernel').metadata["desc"]
        Label:
            text = 'Bias'
        FloatField:
            value := myFilter.bias
            tool_tip = myFilter.get_member('bias').metadata["desc"]
        Label: 
            text = "Plot scope"
        CheckBox:
            checked := myFilter.plotScope
        Label:
            text = "Plot mode"
        EnumComboBox:
            obj := myFilter
            enumName = 'plotMode'

enamldef CorrelatorView(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = 'Num. Channels'
        SpinBox: numFiltersBox:
            minimum = 2
            value = len(myFilter.filters) if myFilter.filters and (len(myFilter.filters) > 0) else 2
        Looper: filterLooper:
            iterable << range(numFiltersBox.value)
            iterable ::
                if len(myFilter.filters) > len(iterable):
                    myFilter.filters = myFilter.filters[:numSweepsBox.value]
                elif len(myFilter.filters) < len(iterable):
                    myFilter.filters += [None]
            Form:
                Label:
                    text = 'Filter {}:'.format(loop_index+1)
                ComboBox:
                    items << filterLib.filterDict.keys()
                    index << filterLib.filterDict.values().index(myFilter.filters[loop_index]) if loop_index < len(myFilter.filters) and myFilter.filters[loop_index] else -1
                    index ::
                        myFilter.filters[loop_index] = filterLib.filterDict[selected_item]

enamldef StateComparatorView(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = 'Threshold'
        FloatField:
            value := myFilter.threshold
        Label:
            text = 'Integration time (samples)'
        IntField:
            value := myFilter.integrationTime
            tool_tip = myFilter.get_member('integrationTime').metadata['desc']
        Label:
            text = "Plot mode"
        EnumComboBox:
            obj := myFilter
            enumName = 'plotMode'
        Label:
            text = 'Child filter'
        ComboBox:
            items << filterLib.filterDict.keys()
            index << filterLib.filterDict.keys().index(myFilter.childFilter) if myFilter.childFilter else -1
            index :: myFilter.childFilter = filterLib.filterDict.keys()[index]

enamldef StreamSelectorView(GroupBox):
    attr myFilter
    attr filterLib
    title := '{} ({})'.format(myFilter.label, myFilter.__class__.__name__)
    Form:
        Label:
            text = "Data source"
        Field:
            text := myFilter.dataSource
        Label:
            text = 'Stream'
        Field:
            text := myFilter.stream
        Label: 
            text = "Plot scope"
        CheckBox:
            checked := myFilter.plotScope
        Label:
            text = "Plot mode"
        EnumComboBox:
            obj := myFilter
            enumName = 'plotMode'
        Label:
            text = 'Saved'
        CheckBox:
            checked := myFilter.saved

#Dummy empty view
enamldef EmptyMeasFilterForm(Container):
    attr myFilter
    attr filterLib

#Map filters to views
filterViewMap = {type(None): EmptyMeasFilterForm,
    MeasFilters.RawStream: RawStreamForm,
    MeasFilters.DigitalDemod: DigitalDemodForm,
    MeasFilters.KernelIntegration: KernelIntegrationForm,
    MeasFilters.Correlator: CorrelatorView,
    MeasFilters.StateComparator: StateComparatorView,
    MeasFilters.StreamSelector: StreamSelectorView}

enamldef MeasFilterManager(Container): measFilterManager: 
    attr filterLib
    DictManagerView:
        dictManager = filterLib.filterManager
        modelName = 'myFilter'
        viewMap = filterViewMap
        viewkwargs = {'filterLib':filterLib}

enamldef MeasFilterManagerWindow(Window): measFilterManagerTest:
    attr filterLib
    title = 'Filter Manager'
    MeasFilterManager:
        filterLib := measFilterManagerTest.filterLib
