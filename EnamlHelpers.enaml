"""
Reusable widgets for handling lists and dictionaries
"""

from traits.api import HasTraits, Dict, TraitDictObject, List, Any, on_trait_change, WeakRef, Instance, Str

from enaml.widgets.api import Window, Container, Stack, StackItem, ListControl, ListItem, PushButton, Form, Label, Field, ComboBox
from enaml.core.api import Looper, Include

from enaml.layout.api import hbox, vbox, spacer

class DictManager(HasTraits):
	"""
	Helper to manage a list next to a set of stack items
	"""
	listItems = List
	stackItems = List
	itemDict = Instance(TraitDictObject)

	def __init__(self, **kwargs):
		super(DictManager, self).__init__(**kwargs)
		dictName = self.itemDict.object().get().keys()[[self.itemDict==item for item in self.itemDict.object().get().values()].index(True)]
		self.itemDict.object().on_trait_change(self.update_lists, dictName+'_items')
		self.itemDict.object().on_trait_change(self.name_change, dictName+'.name')
		for item in self.itemDict.values():
			self.listItems.append(MyListItem(myItem=item))
			self.stackItems.append(item.get_stack_view())

	def name_change(self, obj, name, old, new):
		"""
		Since the dictionary is keyed off item names we need to change the dictionary
		"""
		self.itemDict[new] = self.itemDict.pop(old)

	def update_lists(self, obj, name, new):
		#We do this to also catch name changes where the item name is different to new.removed.keys()
		if new.removed:
			#List current dictionary names
			goodNames = self.itemDict.keys()
			#Find all items in list that are no longer there
			for ct, item in enumerate(reversed(self.listItems)):
				if item.text not in goodNames:
					del self.listItems[-(ct+1)]
					del self.stackItems[-(ct+1)]
		for item in new.added.values():
			self.listItems.append(MyListItem(myItem=item))
			self.stackItems.append(item.get_stack_view())

enamldef MyListItem(ListItem):
	attr myItem
	text := myItem.name
	editable = True
	checked := myItem.enabled
	checkable = True
	
enamldef DictManagerView(Container):
	attr dictManager = DictManager(itemDict=myDict)
	attr myDict 
	attr addDialog
	constraints = [
		hbox(vbox(myList, hbox(addButton, deleteButton, printer, spacer)), myStack),
		myList.width <= 300]
	ListControl: myList:
		resist_width = 'weak'
		row_changed ::
			myStack.index = event.new
		Include: listInc:
			objects << [item for item in dictManager.listItems]
	Stack: myStack:
		Include: stackInc:
			objects << [item for item in dictManager.stackItems]
	PushButton: addButton:
		text = 'Add'
		clicked ::
			addDialog(root_object(), dictManager.itemDict)
	PushButton: deleteButton:
		text = 'Delete'
		clicked ::
			myDict.pop(myList.list_items[myList.current_row].text)
	PushButton: printer:
		text = 'Print dicitonary'
		clicked ::
			print(dictManager.itemDict)
			print(dictManager.stackItems)
			import pdb; pdb.set_trace()

enamldef AddDialog(Window):
	attr itemDict
	attr newClassList
	attr objText
	attr kwargs
	title = 'Add a new {}...'.format(objText)
	modality = 'window_modal'
	Container:
		constraints = [vbox(myForm, hbox(spacer, okButton, cancelButton))]
		Form: myForm:
			Label:
				text = 'New Name'
			Field: newName:
				text = 'New'+objText
			Label: modelChoiceLabel:
				text = 'New {} Model'.format(objText)
			ComboBox: modelChoice:
				index = 0
				items = [f.__name__ for f in newClassList]
		PushButton: okButton:
			text = 'OK'
			clicked ::
				itemDict.update({newName.text:newClassList[modelChoice.index](name=newName.text, **kwargs)})
				close()
		PushButton: cancelButton:
			text = 'Cancel'
			clicked ::
				close()





