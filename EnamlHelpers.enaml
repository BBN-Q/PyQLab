"""
Reusable widgets for handling lists and dictionaries
"""

from traits.api import HasTraits, Dict, TraitDictObject, List, Any, on_trait_change, WeakRef, Instance, Str

from enaml.widgets.api import Container, Stack, StackItem, ListControl, ListItem, PushButton
from enaml.core.api import Looper, Include

from enaml.layout.api import hbox, vbox, spacer

class DictManager(HasTraits):
	"""
	Helper to manage a list next to a set of stack items
	"""
	stackItems = List
	listItems = List
	itemDict = Instance(TraitDictObject)
	dictName = Str

	def __init__(self, **kwargs):
		super(DictManager, self).__init__(**kwargs)
		self.itemDict.object().on_trait_change(self.update_lists, self.dictName+'_items')
		for key,value in self.itemDict.items():
			self.listItems.append(ListItem(text=key))
			self.stackItems.append(value.get_stack_view())

	def sillyprinter(self):
		print('Got here!')

	def update_lists(self, obj, name, new):
		print('Got into updating lists')
		import pdb; pdb.set_trace()
		for name,item in new.removed.items():
			names = [item.name for item in listItems]
			deadIndex = names.index(name)
			del self.listItems[deadIndex]
			del self.stackItems[deadIndex]
		for name,item in new.added.items():
			self.listItems.append(ListItem(text=name))
			self.stackItems.append(item.get_stack_view())


enamldef DictManagerView(Container):
	attr dictManager 
	attr addDialog
	constraints = [
		hbox(vbox(myList, hbox(addButton, deleteButton, printer, spacer)), myStack),
		myList.width <= 300]
	ListControl: myList:
		resist_width = 'weak'
		row_changed ::
			myStack.index = event.new
		Include: listInc:
			objects := dictManager.listItems
	Stack: myStack:
		Include: stackInc:
			objects := dictManager.stackItems
	PushButton: addButton:
		text = 'Add'
		clicked ::
			addDialog(root_object(), dictManager.itemDict)
	PushButton: deleteButton:
		text = 'Delete'
		clicked ::
			itemDict.pop(myList.list_items[myList.current_row].text)
	PushButton: printer:
		text = 'Print dicitonary'
		clicked ::
			print(dictManager.itemDict)
			print(dictManager.stackItems)
			import pdb; pdb.set_trace()





