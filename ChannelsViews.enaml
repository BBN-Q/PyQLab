from enaml.widgets.api import Window, Container, Notebook, Page, PushButton, GroupBox, Form, Label, Field, \
                             ComboBox
from enaml.stdlib.fields import FloatField
from enaml.layout.api import hbox, vbox, spacer
from enaml.core.api import Looper, Conditional

from DictManagerView import DictManagerView
from widgets import EnumComboBox

import QGL.Channels

import QGL.PulseShapes
from types import FunctionType
psList = [f for f in QGL.PulseShapes.__dict__.values() if isinstance(f, FunctionType)]

from ExpSettingsVal import is_valid_awg_channel_name

enamldef LogicalMarkerChannelView(GroupBox): curView:
    attr chan
    attr channelLib
    attr instrumentLib
    attr physicalChannels
    physicalChannels << [ch for ch in channelLib.values() if isinstance(ch, QGL.Channels.PhysicalMarkerChannel)]
    title := '{} (LogicalMarker)'.format(chan.label)
    Form:
        Label:
            text = 'Physical Chan.'
        ComboBox:
            items << [c.label for c in physicalChannels]
            index = items.index(chan.physChan.label) if (chan.physChan and chan.physChan.label in items) else -1
            index ::
                chan.physChan = channelLib[selected_item]
        Looper:
            iterable << sorted(chan.pulseParams.keys())
            Label:
                text = loop_item
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], float) or isinstance(chan.pulseParams[loop_item], int)
                FloatField:
                    value << float(chan.pulseParams[loop_item])
                    value >> chan.pulseParams[loop_item]
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], FunctionType)
                ComboBox:
                    items << [f.__name__ for f in psList]
                    index << psList.index(chan.pulseParams[loop_item])
                    index ::
                        chan.pulseParams[loop_item] = psList[index]

enamldef PhysicalMarkerChannelView(GroupBox): curView:
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} (PhysicalMarker)'.format(chan.label)
    Form:
        Label:
            text = 'Delay (s)'
        FloatField:
            value := chan.delay
        Label:
            text = 'Gate Buffer (s)'
        FloatField:
            value := chan.gateBuffer
        Label:
            text = 'Min Pulse Width (s)'
        FloatField:
            value := chan.gateMinWidth
        Label:
            text = 'AWG'
        ComboBox:
            items << instrumentLib.AWGs.displayList + instrumentLib.markedInstrs.displayList
            index = items.index(chan.AWG) if chan.AWG in items else -1
            index ::
                chan.AWG = selected_item
                chan.translator = instrumentLib[selected_item].translator
                chan.samplingRate = instrumentLib[selected_item].samplingRate

enamldef PhysicalQuadratureChannelView(GroupBox): curView:
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} (PhysicalQuadrature)'.format(chan.label)
    Form:
        Label:
            text = 'AWG'
        ComboBox:
            items << instrumentLib.AWGs.displayList
            index = items.index(chan.AWG) if chan.AWG in items else -1
            index ::
                chan.AWG = selected_item
                chan.translator = instrumentLib[selected_item].translator
                chan.samplingRate = instrumentLib[selected_item].samplingRate
        Label:
            text = 'Source'
        ComboBox:
            items << [''] + instrumentLib.sources.displayList
            index = items.index(chan.generator) if chan.generator in items else 0
            index ::
                chan.generator = selected_item
        Label:
            text = 'Delay (s)'
        FloatField:
            value := chan.delay
        Label:
            text = 'Amp. Factor'
        FloatField:
            value := chan.ampFactor
        Label:
            text = 'Phase Skew (deg.)'
        FloatField:
            value := chan.phaseSkew


enamldef LogicalQuadratureView(GroupBox): curView:
    attr chan
    attr channelLib
    attr physicalChannels
    physicalChannels << [ch for ch in channelLib.values() if isinstance(ch, QGL.Channels.PhysicalQuadratureChannel)]
    attr logicalMarkerChannels
    logicalMarkerChannels << [ch for ch in channelLib.values() if isinstance(ch, QGL.Channels.LogicalMarkerChannel)]
    attr qubits
    qubits << [ch for ch in channelLib.values() if isinstance(ch, QGL.Channels.Qubit)]
    title := '{} ({})'.format(chan.label, chan.__class__.__name__)
    Form:
        Conditional:
            condition = isinstance(chan, QGL.Channels.Measurement)
            Label:
                text = 'Type'
            EnumComboBox:
                obj := chan
                enumName = 'measType'
            Conditional:
                condition << chan.measType == 'autodyne'
                Label:
                    text = 'Autodyne Freq. (MHz)'
                FloatField:
                    value << chan.autodyneFreq/1e6
                    value :: chan.autodyneFreq = value*1e6
                    tool_tip = chan.get_member('autodyneFreq').metadata["desc"]
            Label:
                text = 'Trigger Chan.'
            ComboBox:
                items << [''] + [c.label for c in logicalMarkerChannels]
                index = items.index(chan.trigChan.label)
                index ::
                    chan.trigChan = channelLib[selected_item]
        Conditional:
            condition = isinstance(chan, QGL.Channels.Edge)
            Label:
                text = 'Source Qubit'
            ComboBox:
                items << [c.label for c in qubits]
                index = items.index(chan.source.label) if chan.source else -1
                index ::
                    chan.source = channelLib[selected_item]
            Label:
                text = 'Target Qubit'
            ComboBox:
                items << [c.label for c in qubits]
                index = items.index(chan.target.label) if chan.target else -1
                index ::
                    chan.target = channelLib[selected_item]
        Label:
            text = 'Frequency (MHz)'
        FloatField:
            value << chan.frequency/1e6
            value :: chan.frequency = value*1e6
            tool_tip = chan.get_member('frequency').metadata["desc"]
        Label:
            text = 'Physical Chan.'
        ComboBox:
            items << [c.label for c in physicalChannels]
            index = items.index(chan.physChan.label) if (chan.physChan and chan.physChan.label in items) else -1
            index ::
                chan.physChan = channelLib[selected_item]
        Label:
            text = 'Gate Chan.'
        ComboBox:
            items << [''] + [c.label for c in logicalMarkerChannels]
            index = items.index(chan.gateChan.label) if chan.gateChan else 0
            index ::
                chan.gateChan = channelLib[selected_item] if selected_item else ""
        Looper:
            iterable << sorted(chan.pulseParams.keys())
            Label:
                text = loop_item
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], float) or isinstance(chan.pulseParams[loop_item], int)
                FloatField:
                    value << float(chan.pulseParams[loop_item])
                    value >> chan.pulseParams[loop_item]
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], FunctionType)
                ComboBox:
                    items << [f.__name__ for f in psList]
                    index << psList.index(chan.pulseParams[loop_item])
                    index ::
                        chan.pulseParams[loop_item] = psList[index]


enamldef EmptyChannelView(Container):
    attr chan
    attr channelLib
    attr instrumentLib

ChannelViewMap = {
    type(None): EmptyChannelView,
    QGL.Channels.Qubit: LogicalQuadratureView,
    QGL.Channels.Measurement: LogicalQuadratureView,
    QGL.Channels.Edge: LogicalQuadratureView,
    QGL.Channels.LogicalMarkerChannel: LogicalMarkerChannelView,
    QGL.Channels.PhysicalQuadratureChannel: PhysicalQuadratureChannelView,
    QGL.Channels.PhysicalMarkerChannel: PhysicalMarkerChannelView
}

enamldef ChannelLibraryView(Container): channelLibCont:
    attr channelLib
    attr logicalChannelManager
    attr physicalChannelManager
    attr instrumentLib
    Notebook:
        tab_style = 'preferences'
        Page:
            title = 'Logical'
            closable = False
            DictManagerView:
                dictManager = logicalChannelManager
                modelName = 'chan'
                viewMap = ChannelViewMap
                viewkwargs = {'channelLib': channelLib}
        Page:
            title = "Physical"
            closable = False
            DictManagerView:
                dictManager = physicalChannelManager
                modelName = 'chan'
                viewMap = ChannelViewMap
                viewkwargs = {'instrumentLib': instrumentLib,
                                'channelLib': channelLib}
                labelValidator = is_valid_awg_channel_name

enamldef ChannelLibraryWindow(Window): channelLibWin:
    attr channelLib
    attr instrumentLib
    title = 'Channel Library'
    Container:
        ChannelLibraryView:
            channelLib = channelLibWin.channelLib
            instrumentLib = channelLibWin.instrumentLib
