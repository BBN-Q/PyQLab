from enaml.widgets.api import Window, Container, Notebook, Page, PushButton, GroupBox, Form, Label, Field, \
                             ComboBox
from enaml.stdlib.fields import FloatField
from enaml.layout.api import hbox, vbox, spacer
from enaml.core.api import Looper, Conditional

from DictManagerView import DictManagerView
from widgets import EnumComboBox

import QGL.Channels
from instruments.AWGs import AWG
from instruments.MicrowaveSources import MicrowaveSource

import QGL.PulseShapes
from types import FunctionType
psList = [f for f in QGL.PulseShapes.__dict__.values() if isinstance(f, FunctionType)]

from ExpSettingsVal import is_valid_awg_channel_name

def setIfNotEmpty(lvalue, library, item):
    if item != '':
        lvalue = library[item]
    else:
        lvalue.label = ''
    return lvalue

enamldef LogicalMarkerChannelView(GroupBox): curView:
    attr chan
    attr channelLib
    attr instrumentLib
    attr physicalChannels
    physicalChannels << filter(lambda x: isinstance(x, QGL.Channels.PhysicalMarkerChannel), channelLib.values())
    title := '{} (LogicalMarker)'.format(chan.label)
    Form:
        Label:
            text = 'Physical Chan.'
        ComboBox:
            items << [''] + [c.label for c in physicalChannels]
            index = items.index(chan.physChan.label) if chan.physChan else 0
            index ::
                chan.physChan = items[index]
                # if index > 0:
                #     chan.physChan = physicalChannels[index-1]
                # else:
                #     # chan.physChan = QGL.Channels.PhysicalMarkerChannel()
                #     chan.physChan = None
        Looper:
            iterable << sorted(chan.pulseParams.keys())
            Label:
                text = loop_item
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], float) or isinstance(chan.pulseParams[loop_item], int)
                FloatField:
                    value << float(chan.pulseParams[loop_item])
                    value >> chan.pulseParams[loop_item]
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], FunctionType)
                ComboBox:
                    items << [f.__name__ for f in psList]
                    index << psList.index(chan.pulseParams[loop_item])
                    index ::
                        chan.pulseParams[loop_item] = psList[index]

enamldef PhysicalMarkerChannelView(GroupBox): curView:
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} (PhysicalMarker)'.format(chan.label)
    Form:
        Label:
            text = 'Delay (s)'
        FloatField:
            value := chan.delay
        Label:
            text = 'Gate Buffer (s)'
        FloatField:
            value := chan.gateBuffer
        Label:
            text = 'Min Pulse Width (s)'
        FloatField:
            value := chan.gateMinWidth
        Label:
            text = 'AWG'
        ComboBox:
            items << instrumentLib.AWGs.displayList
            index << instrumentLib.AWGs.displayList.index(chan.AWG.label) if (chan.AWG.label in instrumentLib.AWGs.displayList) else -1
            index ::
                chan.AWG = setIfNotEmpty(chan.AWG, instrumentLib, selected_item)

enamldef PhysicalQuadratureChannelView(GroupBox): curView:
    attr chan
    attr channelLib
    attr instrumentLib
    title := '{} (PhysicalQuadrature)'.format(chan.label)
    Form:
        Label:
            text = 'AWG'
        ComboBox:
            items << instrumentLib.AWGs.displayList
            index << instrumentLib.AWGs.displayList.index(chan.AWG) if (chan.AWG in instrumentLib.AWGs.displayList) else -1
            index ::
                chan.AWG = setIfNotEmpty(chan.AWG, instrumentLib, selected_item)
        Label:
            text = 'Source'
        ComboBox:
            items << instrumentLib.sources.displayList
            index << instrumentLib.sources.displayList.index(chan.generator) if (chan.generator and chan.generator in instrumentLib.sources.displayList) else -1
            index ::
                chan.generator = setIfNotEmpty(chan.generator, instrumentLib, selected_item)
        Label:
            text = 'Delay (s)'
        FloatField:
            value := chan.delay
        Label:
            text = 'Amp. Factor'
        FloatField:
            value := chan.ampFactor
        Label:
            text = 'Phase Skew (deg.)'
        FloatField:
            value := chan.phaseSkew
        

enamldef LogicalQuadratureView(GroupBox): curView:
    attr chan
    attr channelLib
    attr physicalChannels
    physicalChannels << filter(lambda x: isinstance(x, QGL.Channels.PhysicalQuadratureChannel), channelLib.values())
    attr logicalChannels
    logicalChannels << filter(lambda x: isinstance(x, QGL.Channels.LogicalChannel), channelLib.values())
    title := '{} ({})'.format(chan.label, chan.__class__.__name__)
    Form:
        Conditional:
            condition = isinstance(chan, QGL.Channels.Measurement)
            Label:
                text = 'Type'
            EnumComboBox:
                obj := chan
                enumName = 'measType'
            Conditional:
                condition << chan.measType == 'autodyne'
                Label:
                    text = 'Autodyne Freq. (MHz)'
                FloatField:
                    value << chan.autodyneFreq/1e6
                    value :: chan.autodyneFreq = value*1e6
                    tool_tip = chan.get_member('autodyneFreq').metadata["desc"]
            Label:
                text = 'Trigger Chan.'
            ComboBox:
                items << [''] + [c.label for c in logicalChannels]
                index = items.index(chan.trigChan.label)
                index ::
                    if index > 0:
                        chan.trigChan = logicalChannels[index-1]
                    else:
                        # chan.trigChan = QGL.Channels.LogicalChannel()
                        chan.trigChan = None
        Conditional:
            condition = isinstance(chan, QGL.Channels.Edge)
            Label:
                text = 'Source Qubit'
            ComboBox:
                items << [''] + [c.label for c in logicalChannels]
                index = items.index(chan.source.label) if chan.source else 0
                index ::
                    if index > 0:
                        chan.source = logicalChannels[index-1]
                    else:
                        # chan.source = QGL.Channels.LogicalChannel()
                        chan.source = None
            Label:
                text = 'Target Qubit'
            ComboBox:
                items << [''] + [c.label for c in logicalChannels]
                index = items.index(chan.target.label) if chan.target else 0
                index ::
                    if index > 0:
                        chan.target = logicalChannels[index-1]
                    else:
                        chan.target = QGL.Channels.LogicalChannel()
        Label:
            text = 'Frequency (MHz)'
        FloatField:
            value << chan.frequency/1e6
            value :: chan.frequency = value*1e6
            tool_tip = chan.get_member('frequency').metadata["desc"]
        Label:
            text = 'Physical Chan.'
        ComboBox:
            items << [''] + [c.label for c in physicalChannels]
            index = items.index(chan.physChan.label) if chan.physChan else 0
            index ::
                if index > 0:
                    chan.target = physicalChannels[index-1]
                else:
                    chan.target = QGL.Channels.PhysicalChannel()
        Label:
            text = 'Gate Chan.'
        ComboBox:
            items << [''] + [c.label for c in logicalChannels]
            index = items.index(chan.gateChan.label) if chan.gateChan else 0
            index ::
                if index > 0:
                    chan.gateChan = logicalChannels[index-1]
                else:
                    chan.gateChan = QGL.Channels.LogicalChannel()
        Looper:
            iterable << sorted(chan.pulseParams.keys())
            Label:
                text = loop_item
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], float) or isinstance(chan.pulseParams[loop_item], int)
                FloatField:
                    value << float(chan.pulseParams[loop_item])
                    value >> chan.pulseParams[loop_item]
            Conditional:
                condition = isinstance(chan.pulseParams[loop_item], FunctionType)
                ComboBox:
                    items << [f.__name__ for f in psList]
                    index << psList.index(chan.pulseParams[loop_item])
                    index ::
                        chan.pulseParams[loop_item] = psList[index]
        

enamldef EmptyChannelView(Container):
    attr chan
    attr channelLib
    attr instrumentLib

ChannelViewMap = {
    type(None): EmptyChannelView,
    QGL.Channels.Qubit: LogicalQuadratureView,
    QGL.Channels.Measurement: LogicalQuadratureView,
    QGL.Channels.Edge: LogicalQuadratureView,
    QGL.Channels.LogicalMarkerChannel: LogicalMarkerChannelView,
    QGL.Channels.PhysicalQuadratureChannel: PhysicalQuadratureChannelView,
    QGL.Channels.PhysicalMarkerChannel: PhysicalMarkerChannelView
}

enamldef ChannelLibraryView(Container): channelLibCont:
    attr channelLib
    attr logicalChannelManager
    attr physicalChannelManager
    attr instrumentLib
    Notebook:
        tab_style = 'preferences'
        Page:
            title = 'Logical'
            closable = False
            DictManagerView:
                dictManager = logicalChannelManager
                modelName = 'chan'
                viewMap = ChannelViewMap
                viewkwargs = {'channelLib': channelLib}
        Page:
            title = "Physical"
            closable = False
            DictManagerView:
                dictManager = physicalChannelManager
                modelName = 'chan'
                viewMap = ChannelViewMap
                viewkwargs = {'instrumentLib': instrumentLib,
                                'channelLib': channelLib}
                labelValidator = is_valid_awg_channel_name

enamldef ChannelLibraryWindow(Window): channelLibWin:
    attr channelLib
    attr instrumentLib
    title = 'Channel Library'
    Container:
        ChannelLibraryView:
            channelLib = channelLibWin.channelLib
            instrumentLib = channelLibWin.instrumentLib
