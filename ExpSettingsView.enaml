from enaml.widgets.api import MainWindow, Container, Notebook, Page, GroupBox, Label, ToolBar, \
					 Action, FileDialog, ComboBox, PushButton
from enaml.widgets.include import Include
from enaml.layout.api import hbox, vbox, spacer, horizontal
from enaml.core.api import Looper, Include

from QGL.ChannelsViews import ChannelLibraryView
from instruments.InstrumentManagerView import InstrumentManagerView
from SweepsViews import SweepManager
from MeasFiltersViews import MeasFilterManager


#See what's in the quick pick file to enumerate it
import config, json
try:
    with open(config.quickpickFile, 'r') as FID:
        quickPicks = json.load(FID)
        quickpickList = quickPicks.keys()
except IOError:
    print('No quick pick file found.')
    quickpickList = []


def get_update_script_file_callback(expSettings):
	def update_script_file_callback(dlg):
		if dlg.result == 'accepted': #if the pressed "open" otherwise we get 'rejected'
			expSettings.curFileName = dlg.path
	return update_script_file_callback


enamldef ExpSettingsView(MainWindow): main:
	attr expSettings
	attr curFileName := expSettings.curFileName
	title = 'Experiment Settings'
	MenuBar:
		Menu:
			title = '&File'
			Action:
				text = 'Open\tCtrl+O'
				triggered ::
					dlg = FileDialog(root_object(), title='Choose a script file..', mode='save_file', 
						callback=get_update_script_file_callback(expSettings), filters=['*.json'])
					dlg.open()
			Action:
				text = 'Save\tCtrl+S'
				tool_tip << 'Save to {}'.format(curFileName)
				triggered :: expSettings.write_to_file()
			Action:
				text = 'Save As\tCtrl+Shift+S'
				tool_tip = 'Save to a quick pick slot'
				triggered :: print 'clicked save to quick pick'
			Action:
				text = 'Load from quick pick\tCtrl+L'
				triggered ::
					view = QuickPickView()
					view.show()
		Menu:
			title = '&Mode'
			Action:
				text = 'CW Mode'
				checkable = True
				checked := expSettings.CWMode
			Action:
				text = 'Debug\tCtrl+D'
				tool_tip = 'Start debugger console'
				checkable = True
				toggled :: import pdb; pdb.set_trace()
	Container:
		padding = 5
		Notebook:
			tab_style = 'preferences'
			Page:
				title = 'Channels'
				closable = False
				ChannelLibraryView:
					channelLib := expSettings.channels
					instrumentLib := expSettings.instruments
			Page:
				title = 'Instruments'
				closable = False
				InstrumentManagerView:
					instrLib := expSettings.instruments
			Page:
				title = "Measurements"
				closable = False
				MeasFilterManager:
					filterLib := expSettings.measurements
			Page:
				title = "Sweeps"
				closable = False
				SweepManager:
					sweepLib := expSettings.sweeps
		GroupBox:
			constraints = [horizontal(left, spacer.flex(), settingsApply, right)]
			PushButton: settingsApply:
				text = 'Apply'
				clicked ::
					expSettings.write_to_file()

enamldef QuickPickView(Window): dlg:
	GroupBox:
		title = 'Quick Picker'
		constraints = [
			vertical(
				top,
				quickpickCombo,
				horizontal(left, spacer.flex(), cancel, load, right),
				buttom)
			]
		ComboBox: quickpickCombo:
			items << quickpickList
			hug_width = 'medium'
		PushButton: cancel:
			text = 'Cancel'
			clicked :: dlg.close()
		PushButton: load:
			text = 'Load'
			clicked ::
				expSettings.apply_quickpick(quickpickList[quickpickCombo.index])
				dlg.close()
			hug_width = 'medium'

