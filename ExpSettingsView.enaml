from enaml.widgets.api import MainWindow, Window, Container, Notebook, Page, MenuBar, \
					 Menu, Action, FileDialogEx, ComboBox, PushButton, PopupView, Label, \
					 CheckBox, Form
from enaml.core.api import Looper
from enaml.layout.api import hbox, vbox, spacer, align

from ChannelsViews import ChannelLibraryView
from instruments.InstrumentManagerView import InstrumentManagerView
from SweepsViews import SweepManager
from MeasFiltersViews import MeasFilterManager
import os, sys, time


#See what's in the quick pick file to enumerate it
import config, json
try:
    with open(config.quickpickFile, 'r') as FID:
        quickPicks = json.load(FID)
        quickpickList = quickPicks.keys()
except IOError:
    print('No quick pick file found.')
    quickpickList = []

def get_update_script_file_callback(expSettings):
	def update_script_file_callback(dlg):
		if dlg.result == 'accepted': #if the pressed "open" otherwise we get 'rejected'
			expSettings.curFileName = dlg.path
			print(expSettings.curFileName)
	return update_script_file_callback

chosenQuickPick = bytearray("")

enamldef QuickPickMenu(Menu):
	attr expSettings
	Looper:
		iterable << quickpickList
		Action:
			text = loop_item
			triggered ::
				chosenQuickPick[:] = bytearray(loop_item.encode("ascii"))
				expSettings.apply_quickpick(loop_item)

enamldef NotificationPopup(PopupView):
	attr displayText = ''
	foreground = 'white'
	background = 'rgba(30, 30, 30, 0.85)'
	window_type = 'tool_tip'
	parent_anchor = (1.0, 1.0)
	anchor = (1.0, 1.0)
	offset = (-10, -10)
	timeout = 1
	fade_in_duration = 200
	fade_out_duration = 200
	Container:
		Label:
			foreground = 'white'
			text = displayText
			align = 'center'

enamldef ErrorPopup(Window): error_win:
    title = 'Validation Error'
    modality = 'application_modal'
    attr displayText = ''

    Container:
        constraints = []

        Label:
        	text = displayText

        PushButton: ok_btn:
            text = 'Okay'
            clicked ::
                error_win.close()


enamldef ExpSettingsView(MainWindow): main:
	attr expSettings
	attr curFileName := expSettings.curFileName
	title = 'Experiment Settings'
	MenuBar:
		Menu:
			title = '&File'
			Action:
				text = 'Save\tCtrl+S'
				tool_tip << 'Save to {}'.format(curFileName)
				triggered ::
					expSettings.write_to_file()
					if expSettings.write_libraries():
						NotificationPopup(main, window_type='window', displayText="Settings saved").show()
					else:
						ep = ErrorPopup(displayText=expSettings.format_errors())
						ep.show()
						ep.center_on_widget(main)

			Action:
				text = 'Save Config As\tCtrl+Shift+S'
				tool_tip = 'Save to a new setting file'
				triggered ::
					path = FileDialogEx.get_existing_directory(main,show_dirs_only=False)
					if not os.path.isdir(path) and path !='':
						print('% s Does not Exist: Creating %s'%(path,path))
						os.mkdir(path)

					if expSettings.save_config(path):
						NotificationPopup(main, window_type='window', displayText="Config Saved").show()
					else:
						ep = ErrorPopup(displayText=expSettings.format_errors())
						ep.show()
						ep.center_on_widget(main)

			Action:
				text = 'Load Config\tCtrl+Shift+O'
				tool_tip = 'Load Config Files from Saved Location'
				triggered ::
					path = FileDialogEx.get_existing_directory(main,show_dirs_only=False)
					if not os.path.isdir(path):
						print('% s Does not Exist: Creating %s'%(path,path))
						ep = ErrorPopup(displayText=expSettings.format_errors())
						ep.show()
						ep.center_on_widget(main)
						os.mkdir(path)

					if expSettings.load_config(path):
						NotificationPopup(main, window_type='window', displayText="New Config Loaded ... Restarting GUI").show()
						os.execl(sys.executable, sys.executable, * sys.argv)

					else:
						ep = ErrorPopup(displayText=expSettings.format_errors())
						ep.show()
						ep.center_on_widget(main)

			Action:
				text = "Stash current settings"
				enabled = False
				triggered ::
					NotificationPopup(main, window_type='window', displayText="Settings stashed").show()
			Action:
				text = "Pop stashed settings"
				enabled = False
				triggered ::
					NotificationPopup(main, window_type='window', displayText="Stashed settings applied").show()
			Action:
				text = 'Store to quick pick\tCtrl+O'
				enabled = False
				triggered :: print 'clicked store to quick pick'
			Menu:
				title = 'Load from quick pick'
				Looper:
					iterable << quickpickList
					Action:
						text = loop_item
						triggered ::
							chosenQuickPick[:] = bytearray(loop_item.encode("ascii"))
							expSettings.apply_quickpick(loop_item)
			Action:
				text = 'Quit\tCtrl+Q'
				triggered :: main.close()
		Menu:
			title = '&Mode'
			Action:
				text = 'CW Mode'
				checkable = True
				checked := expSettings.CWMode
			Action:
				text = 'Debug\tCtrl+D'
				tool_tip = 'Start debugger console'
				checkable = True
				toggled :: import pdb; pdb.set_trace()
	Container:
		constraints = [
			vbox(
			tabs,
			hbox(quickPick, spacer, cbValidateForm, settingsApply)
			),
			align("v_center", quickPick, cbValidateForm, settingsApply )
		]
		padding = 5
		Notebook: tabs:
			tab_style = 'preferences'
			Page:
				title = 'Channels'
				closable = False
				ChannelLibraryView:
					channelLib := expSettings.channels
					logicalChannelManager := expSettings.logicalChannelManager
					physicalChannelManager := expSettings.physicalChannelManager
					instrumentLib := expSettings.instruments
			Page:
				title = 'Instruments'
				closable = False
				InstrumentManagerView:
					instrLib := expSettings.instruments
			Page:
				title = "Measurements"
				closable = False
				MeasFilterManager:
					filterLib := expSettings.measurements
			Page:
				title = "Sweeps"
				closable = False
				SweepManager:
					sweepLib := expSettings.sweeps
		PushButton: quickPick:
			text = "QuickPick"
			clicked ::
				QuickPickMenu(expSettings=expSettings).popup()
				NotificationPopup(main, window_type='window', parent_anchor=(0, 1.0), anchor=(0,1), offset=(10,-10), displayText="{} applied".format(str(chosenQuickPick))).show()
		Form: cbValidateForm:
			Label:
				text = "Validate"
			CheckBox:
				checked := expSettings.validate
		PushButton: settingsApply:
			text = 'Apply'
			clicked ::
				expSettings.write_to_file()
				if expSettings.write_libraries():
					NotificationPopup(main, window_type='window', displayText="Settings saved").show()
				else:
					ep = ErrorPopup(displayText=expSettings.format_errors())
					ep.show()
					ep.center_on_widget(main)
