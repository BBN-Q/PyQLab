from enaml.widgets.api import MainWindow, Window, Container, Notebook, Page, GroupBox, Label, MenuBar, \
					 Menu, Action, FileDialog, ComboBox, PushButton

from enaml.layout.api import hbox, vbox, spacer

from QGL.ChannelsViews import ChannelLibraryView
from instruments.InstrumentManagerView import InstrumentManagerView
from SweepsViews import SweepManager
from MeasFiltersViews import MeasFilterManager


#See what's in the quick pick file to enumerate it
import config, json
try:
    with open(config.quickpickFile, 'r') as FID:
        quickPicks = json.load(FID)
        quickpickList = quickPicks.keys()
except IOError:
    print('No quick pick file found.')
    quickpickList = []


def get_update_script_file_callback(expSettings):
	def update_script_file_callback(dlg):
		if dlg.result == 'accepted': #if the pressed "open" otherwise we get 'rejected'
			expSettings.curFileName = dlg.path
	return update_script_file_callback


enamldef ExpSettingsView(MainWindow): main:
	attr expSettings
	attr curFileName := expSettings.curFileName
	title = 'Experiment Settings'
	MenuBar:
		Menu:
			title = '&File'
			Action:
				text = 'Save\tCtrl+S'
				tool_tip << 'Save to {}'.format(curFileName)
				triggered :: 
					expSettings.write_to_file()
					expSettings.write_libraries()
			Action:
				text = 'Save As\tCtrl+Shift+S'
				tool_tip = 'Save to a new setting file'
				triggered ::
					dlg = FileDialog(root_object(), title='Choose a script file..', mode='save_file', 
						callback=get_update_script_file_callback(expSettings), filters=['*.json'])
					dlg.open()
			Action:
				text = 'Store to quick pick\tCtrl+O'
				triggered :: print 'clicked store to quick pick'
			Action:
				text = 'Load from quick pick\tCtrl+L'
				triggered :: QuickPickView(main)
			Action:
				text = 'Quit\tCtrl+Q'
				triggered :: main.close()
		Menu:
			title = '&Mode'
			Action:
				text = 'CW Mode'
				checkable = True
				checked := expSettings.CWMode
			Action:
				text = 'Debug\tCtrl+D'
				tool_tip = 'Start debugger console'
				checkable = True
				toggled :: import pdb; pdb.set_trace()
	Container:
		constraints = [
			vbox(tabs,
				hbox(spacer, settingsApply),
				spacer)
		]
		padding = 5
		Notebook: tabs:
			tab_style = 'preferences'
			Page:
				title = 'Channels'
				closable = False
				ChannelLibraryView:
					channelLib := expSettings.channels
					instrumentLib := expSettings.instruments
			Page:
				title = 'Instruments'
				closable = False
				InstrumentManagerView:
					instrLib := expSettings.instruments
			Page:
				title = "Measurements"
				closable = False
				MeasFilterManager:
					filterLib := expSettings.measurements
			Page:
				title = "Sweeps"
				closable = False
				SweepManager:
					sweepLib := expSettings.sweeps
		PushButton: settingsApply:
			text = 'Apply'
			clicked :: expSettings.write_to_file()

enamldef QuickPickView(Window): dlg:
	title = 'Quick Picker'
	Container:
		constraints = [
			vbox(
				quickpickCombo,
				spacer,
				hbox(spacer.flex(), cancel, load))
			]
		ComboBox: quickpickCombo:
			items << quickpickList
			hug_width = 'medium'
		PushButton: cancel:
			text = 'Cancel'
			clicked :: dlg.close()
		PushButton: load:
			text = 'Load'
			clicked ::
				expSettings.apply_quickpick(quickpickList[quickpickCombo.index])
				dlg.close()
			hug_width = 'medium'

