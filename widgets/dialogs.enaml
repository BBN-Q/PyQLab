from enaml.widgets.api import Dialog, Label, Field, ComboBox, Form, CheckBox

from enaml.layout.api import hbox, vbox, spacer

from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogInstructionArea)

enamldef ItemSelector(TaskDialogContentArea):
	alias newLabel: newLabelField.text
	alias newModelNum: newModelBox.index
	attr modelNames
	Label:
		text = "New Label"
	Field: newLabelField:
		pass
	Label:
		text = "New Model"
	ComboBox: newModelBox:
		index = 0
		items = modelNames

enamldef DialogBody(TaskDialogBody):
	alias itemSelector: itemSelector
	attr objText
	attr modelNames
	ItemSelector: itemSelector:
		newLabel = "New"+objText
		modelNames = parent.modelNames
	TaskDialogCommandArea:
		constraints = [ hbox(spacer, bbox) ]
		DialogButtonBox: bbox:
			buttons = [
				DialogButton('OK', 'accept'),
				DialogButton('Cancel', 'reject'),
			]

enamldef AWGItemSelector(TaskDialogContentArea):
	alias newLabel: newLabelField.text
	alias newModelNum: newModelBox.index
	alias auto_populate_channels: auto_populate_channels_checkbox.checked
	attr modelNames
	Form:
		Label:
			text = "New Label"
		Field: newLabelField:
			pass
		Label:
			text = "New Model"
		ComboBox: newModelBox:
			index = 0
			items = modelNames
	CheckBox: auto_populate_channels_checkbox:
		text = "Auto-populate channels"

enamldef AWGDialogBody(TaskDialogBody):
	alias itemSelector: itemSelector
	attr objText
	attr modelNames
	AWGItemSelector: itemSelector:
		newLabel = "New"+objText
		modelNames = parent.modelNames
	TaskDialogCommandArea:
		constraints = [ hbox(spacer, bbox) ]
		DialogButtonBox: bbox:
			buttons = [
				DialogButton('OK', 'accept'),
				DialogButton('Cancel', 'reject'),
			]

enamldef AddItemDialog(Dialog):
	attr modelNames
	attr objText
	alias newLabel: dialogBody.itemSelector.newLabel
	alias newModelNum: dialogBody.itemSelector.newModelNum
	# alias newLabel: dialogBody.contentArea.newLabelField
	title = 'Add a new {}...'.format(objText)
	DialogBody: dialogBody:
		objText = parent.objText
		modelNames = parent.modelNames

enamldef AddAWGDialog(Dialog):
	attr modelNames
	attr objText
	alias newLabel: dialogBody.itemSelector.newLabel
	alias newModelNum: dialogBody.itemSelector.newModelNum
	alias auto_populate_channels: dialogBody.itemSelector.auto_populate_channels
	# alias newLabel: dialogBody.contentArea.newLabelField
	title = 'Add a new {}...'.format(objText)
	AWGDialogBody: dialogBody:
		objText = parent.objText
		modelNames = parent.modelNames

# enamldef AddDialog(Window):
# 	attr newClassList
# 	attr objText
# 	title = 'Add a new {}...'.format(objText)
# 	modality = 'window_modal'
# 	Container:
# 		constraints = [vbox(myForm, hbox(spacer, cancelButton, okButton))]
# 		Form: myForm:
# 			Label:
# 				text = 'New Label'
# 			Field: newLabel:
# 				text = 'New'+objText
# 			Label:
# 				text = 'New {} Model'.format(objText)
# 			ComboBox: modelChoice:
# 				index = 0
# 				items = [f.__name__ for f in newClassList]
# 		PushButton: cancelButton:
# 			text = 'Cancel'
# 			clicked ::
# 				close()
# 		PushButton: okButton:
# 			text = 'OK'
# 			clicked ::
# 				dictManager.add(newLabel.text, newClassList[modelChoice.index](label=newLabel.text))
# 				close()
