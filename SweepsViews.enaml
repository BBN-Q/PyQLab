from enaml.widgets.api import Window, Label, Field, Form, Container, GroupBox, ComboBox, \
    PushButton, SpinBox
from enaml.stdlib.fields import FloatField, IntField
from enaml.core.api import Conditional, Looper
from enaml.layout.api import hbox, vbox, spacer, align

from widgets import EnumComboBox, EnumIntComboBox
from DictManagerView import DictManagerView

import Sweeps

from instruments.AWGs import AWG
from instruments.plugins import find_view_maps

enamldef PointsSweepForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.__class__.__name__)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints
        Label: 
            text = 'Instrument'
        ComboBox:
            index << possibleInstrs.index(sweep.instr) if (possibleInstrs and sweep.instr) else 0
            index :: sweep.instr = possibleInstrs[index]
            items << [item for item in possibleInstrs]

enamldef AttenuationSweepForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.__class__.__name__)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints
        Label: 
            text = 'Instrument'
        ComboBox:
            index << possibleInstrs.index(sweep.instr) if (possibleInstrs and sweep.instr) else 0
            index :: sweep.instr = possibleInstrs[index]
            items << [item for item in possibleInstrs]
        Label:
            text = 'Channel'
        EnumIntComboBox:
            obj := sweep
            intName = 'channel'

enamldef SegmentNumForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.__class__.__name__)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints

enamldef SegmentNumWithCalsForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.__class__.__name__)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints
        Label:
            text = 'Num Cals'
        IntField:
            value := sweep.numCals

enamldef AWGChannelForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.label)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints
        Label:
            text = 'Channel'
        EnumComboBox:
            obj := sweep
            enumName = 'channel'
        Label:
            text = 'Mode'
        EnumComboBox:
            obj := sweep
            enumName = 'mode'
        Label:
            text = 'AWG'
        ComboBox:
            index << possibleInstrs.index(sweep.instr) if (possibleInstrs and sweep.instr) else 0
            index :: sweep.instr = possibleInstrs[index]
            items << [item for item in possibleInstrs]

enamldef AWGSequenceForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.label)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Base Sequence'
        Field:
            text := sweep.sequenceFile
        Label:
            text = 'Start'
        IntField:
            # value << int(sweep.start)
            # value >> sweep.start
            value := sweep.start 
        Label:
            text = 'Stop'
        IntField:
            # value << int(sweep.stop)
            # value >> sweep.stop
            value := sweep.stop
        Label:
            text = 'Step'
        IntField:
            # value << int(sweep.step)
            # value >> sweep.step
            value := sweep.step

enamldef RepeatForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.label)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Num. Reps.'
        IntField:
            value := sweep.numRepeats

enamldef PowerSweepForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.__class__.__name__)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints
        Label: 
            text = 'Instrument'
        ComboBox:
            index << possibleInstrs.index(sweep.instr) if (possibleInstrs and sweep.instr) else 0
            index :: sweep.instr = possibleInstrs[index]
            items << [item for item in possibleInstrs]
        Label:
            text = 'Units'
        EnumComboBox:
            obj := sweep
            enumName = 'units'

enamldef HeterodyneSweepForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.__class__.__name__)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints
        Label:
            text = 'IF frequency (GHz)'
        FloatField:
            value := sweep.diffFreq
        Label: 
            text = 'RF Instrument'
        ComboBox:
            index << possibleInstrs.index(sweep.instr1) if (possibleInstrs and sweep.instr1) else 0
            index :: sweep.instr1 = possibleInstrs[index]
            items << [item for item in possibleInstrs]
        Label: 
            text = 'LO Instrument'
        ComboBox:
            index << possibleInstrs.index(sweep.instr2) if (possibleInstrs and sweep.instr2) else 0
            index :: sweep.instr2 = possibleInstrs[index]
            items << [item for item in possibleInstrs]

enamldef ThresholdSweepForm(GroupBox):
    attr sweep
    attr possibleInstrs
    title := '{} ({})'.format(sweep.label, sweep.__class__.__name__)
    Form:
        Label:
            text = 'Axis Label'
        Field:
            text := sweep.axisLabel
        Label:
            text = 'Start'
        FloatField:
            value := sweep.start
        Label:
            text = 'Stop'
        FloatField:
            value := sweep.stop
        Label:
            text = 'Step'
        FloatField:
            value := sweep.step
        Label:
            text = 'Num. Points'
        IntField:
            value := sweep.numPoints
        Label: 
            text = 'Stream'
        EnumComboBox:
            items = ['(1,1)','(1,2)','(2,1)','(2,2)']
            obj := sweep
            enumName = 'stream'


enamldef EmptySweepForm(Container):
    attr sweep
    attr possibleInstrs

#Map sweeps to view
sweepViewMap = {type(None):EmptySweepForm, Sweeps.PointsSweep:PointsSweepForm, 
                    Sweeps.SegmentNum:SegmentNumForm,
                    Sweeps.SegmentNumWithCals:SegmentNumWithCalsForm,
                    Sweeps.AWGChannel:AWGChannelForm,
                    Sweeps.AWGSequence:AWGSequenceForm,
                    Sweeps.Attenuation:AttenuationSweepForm, 
                    Sweeps.Power:PowerSweepForm,
                    Sweeps.Repeat:RepeatForm,
                    Sweeps.DC:PointsSweepForm,
                    Sweeps.HeterodyneFrequency:HeterodyneSweepForm,
                    Sweeps.Threshold:ThresholdSweepForm}

# add plugins maps
find_view_maps(Sweeps.Sweep, sweepViewMap)

enamldef SweepManager(Container): sweepManager:
    attr sweepLib
    attr sweepOrderObjs = None
    constraints = [vbox(sweepDictView, hbox(orderBox, spacer))]
    DictManagerView: sweepDictView:
        dictManager = sweepLib.sweepManager
        viewMap = sweepViewMap
        viewkwargs = {'possibleInstrs':sweepLib.possibleInstrs}
        modelName = 'sweep'
    GroupBox: orderBox:
        title = 'Sweep Order'
        hug_width = 'medium'
        constraints = [hbox(sweepNumForm, sweepOrderForm)]
        Form: sweepNumForm:
            hug_width = 'medium'
            Label:
                text = "Number of Sweeps"
            SpinBox: numSweepsBox:
                minimum = 0
                maximum = 3
                value << len(sweepLib.sweepOrder) if len(sweepLib.sweepOrder) > 0 else 0
        Form: sweepOrderForm:
            hug_width = 'medium'
            Looper: sweepLooper:
                iterable << range(numSweepsBox.value)
                iterable ::
                    if len(sweepLib.sweepOrder) > len(iterable):
                        sweepLib.sweepOrder = sweepLib.sweepOrder[:numSweepsBox.value]
                    elif len(sweepLib.sweepOrder) < len(iterable):
                        sweepLib.sweepOrder += [sweepLib.sweepList[0]]
                Form:
                    initialized ::
                        if len(sweepLib.sweepOrder) < loop_index+1 and len(sweepLib.sweepList) > 0:
                            sweepLib.sweepOrder += [sweepLib.sweepList[0]]
                    Label:
                        text = 'Sweep {}:'.format(loop_index+1)
                    ComboBox:
                        items << sweepLib.sweepList
                        index << sweepLib.sweepList.index(sweepLib.sweepOrder[loop_index]) if loop_index < len(sweepLib.sweepOrder) else -1
                        index ::
                            sweepLib.sweepOrder[loop_index] = sweepLib.sweepList[index]

enamldef SweepManagerWindow(Window): sweepManagerTest:
    attr sweepLib
    title = 'Sweep Manager'
    SweepManager:
        sweepLib := sweepManagerTest.sweepLib

